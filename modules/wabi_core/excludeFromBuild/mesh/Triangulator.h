// This header file was auto-generated by ClassMate++
// Created: 20 Nov 2009 2:43:27 pm
// Copyright (c) 2009, HurleyWorks

#pragma once

typedef std::vector<TripleInfo> NewTriangles;

template <typename T>
class Triangulator
{

 public:
	 Triangulator (long numVerts, 
				   const Eigen::Matrix<T,3,1> * verts,
				   const Eigen::Matrix<T,3,1> & normal,
				   Tri * trisOut);

	~Triangulator ();
	
	int triCount ();
	long triple ();
	
 private:
	long vertexCount;
	const Eigen::Matrix<T,3,1> *vertex; // v
	const Eigen::Matrix<T,3,1> normal;
	Tri *triangle;
	bool *active;
	long numTris,start;
	long p1,p2,m1,m2;
	bool lastPositive;

	long getNextActive (long x, long vertexCount, const bool * active);
	long getPrevActive (long x, long vertexCount, const bool * active);
		
}; // end class Triangulator

typedef Triangulator<float> Triangulatorf;
typedef Triangulator<double> Triangulatord;
