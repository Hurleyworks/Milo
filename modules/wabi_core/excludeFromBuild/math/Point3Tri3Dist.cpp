// This source file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// ctor
template <typename T>
Point3Tri3Dist<T>::Point3Tri3Dist (const  Eigen::Matrix<T, 3, 1> & point, const Triangle3 <T> & triangle)
	: mPoint(&point),
	  mTriangle(&triangle)
{
}

// dtor
template <typename T>
Point3Tri3Dist<T>::~Point3Tri3Dist ()
{	
}

template<typename T>
T Point3Tri3Dist<T>::GetSquared()
{
	Eigen::Matrix<T, 3, 1> diff = mTriangle->getVertexPos(0) - *mPoint;
	Eigen::Matrix<T, 3, 1> edge0 = mTriangle->getVertexPos(1) - mTriangle->getVertexPos(0);
	Eigen::Matrix<T, 3, 1> edge1 = mTriangle->getVertexPos(2) - mTriangle->getVertexPos(0);
	T a00 = edge0.squaredNorm();
	T a01 = edge0.dot(edge1);
	T a11 = edge1.squaredNorm();
	T b0 = diff.dot(edge0);
	T b1 = diff.dot(edge1);
	T c = diff.squaredNorm();
	T det = Math<T>::FAbs(a00*a11 - a01*a01);
	T s = a01*b1 - a11*b0;
	T t = a01*b0 - a00*b1;
	T sqrDistance;

	if (s + t <= det)
	{
		if (s < (T)0)
		{
			if (t < (T)0)  // region 4
			{
				if (b0 < (T)0)
				{
					t = (T)0;
					if (-b0 >= a00)
					{
						s = (T)1;
						sqrDistance = a00 + ((T)2)*b0 + c;
					}
					else
					{
						s = -b0 / a00;
						sqrDistance = b0*s + c;
					}
				}
				else
				{
					s = (T)0;
					if (b1 >= (T)0)
					{
						t = (T)0;
						sqrDistance = c;
					}
					else if (-b1 >= a11)
					{
						t = (T)1;
						sqrDistance = a11 + ((T)2)*b1 + c;
					}
					else
					{
						t = -b1 / a11;
						sqrDistance = b1*t + c;
					}
				}
			}
			else  // region 3
			{
				s = (T)0;
				if (b1 >= (T)0)
				{
					t = (T)0;
					sqrDistance = c;
				}
				else if (-b1 >= a11)
				{
					t = (T)1;
					sqrDistance = a11 + ((T)2)*b1 + c;
				}
				else
				{
					t = -b1 / a11;
					sqrDistance = b1*t + c;
				}
}
		}
		else if (t < (T)0)  // region 5
		{
			t = (T)0;
			if (b0 >= (T)0)
			{
				s = (T)0;
				sqrDistance = c;
			}
			else if (-b0 >= a00)
			{
				s = (T)1;
				sqrDistance = a00 + ((T)2)*b0 + c;
			}
			else
			{
				s = -b0 / a00;
				sqrDistance = b0*s + c;
			}
		}
		else  // region 0
		{
			// minimum at interior point
			T invDet = ((T)1) / det;
			s *= invDet;
			t *= invDet;
			sqrDistance = s*(a00*s + a01*t + ((T)2)*b0) +
				t*(a01*s + a11*t + ((T)2)*b1) + c;
		}
	}
	else
	{
		T tmp0, tmp1, numer, denom;

		if (s < (T)0)  // region 2
		{
			tmp0 = a01 + b0;
			tmp1 = a11 + b1;
			if (tmp1 > tmp0)
			{
				numer = tmp1 - tmp0;
				denom = a00 - ((T)2)*a01 + a11;
				if (numer >= denom)
				{
					s = (T)1;
					t = (T)0;
					sqrDistance = a00 + ((T)2)*b0 + c;
				}
				else
				{
					s = numer / denom;
					t = (T)1 - s;
					sqrDistance = s*(a00*s + a01*t + ((T)2)*b0) +
						t*(a01*s + a11*t + ((T)2)*b1) + c;
				}
			}
			else
			{
				s = (T)0;
				if (tmp1 <= (T)0)
				{
					t = (T)1;
					sqrDistance = a11 + ((T)2)*b1 + c;
				}
				else if (b1 >= (T)0)
				{
					t = (T)0;
					sqrDistance = c;
				}
				else
				{
					t = -b1 / a11;
					sqrDistance = b1*t + c;
				}
			}
		}
		else if (t < (T)0)  // region 6
		{
			tmp0 = a01 + b1;
			tmp1 = a00 + b0;
			if (tmp1 > tmp0)
			{
				numer = tmp1 - tmp0;
				denom = a00 - ((T)2)*a01 + a11;
				if (numer >= denom)
				{
					t = (T)1;
					s = (T)0;
					sqrDistance = a11 + ((T)2)*b1 + c;
				}
				else
				{
					t = numer / denom;
					s = (T)1 - t;
					sqrDistance = s*(a00*s + a01*t + ((T)2)*b0) +
						t*(a01*s + a11*t + ((T)2)*b1) + c;
				}
			}
			else
			{
				t = (T)0;
				if (tmp1 <= (T)0)
				{
					s = (T)1;
					sqrDistance = a00 + ((T)2)*b0 + c;
				}
				else if (b0 >= (T)0)
				{
					s = (T)0;
					sqrDistance = c;
				}
				else
				{
					s = -b0 / a00;
					sqrDistance = b0*s + c;
				}
			}
		}
		else  // region 1
		{
			numer = a11 + b1 - a01 - b0;
			if (numer <= (T)0)
			{
				s = (T)0;
				t = (T)1;
				sqrDistance = a11 + ((T)2)*b1 + c;
			}
			else
			{
				denom = a00 - ((T)2)*a01 + a11;
				if (numer >= denom)
				{
					s = (T)1;
					t = (T)0;
					sqrDistance = a00 + ((T)2)*b0 + c;
				}
				else
				{
					s = numer / denom;
					t = (T)1 - s;
					sqrDistance = s*(a00*s + a01*t + ((T)2)*b0) +
						t*(a01*s + a11*t + ((T)2)*b1) + c;
				}
			}
		}
	}

	// Account for numerical round-off error.
	if (sqrDistance < (T)0)
	{
		sqrDistance = (T)0;
	}

	mClosestPoint0 = *mPoint;
	mClosestPoint1 = mTriangle->getVertexPos(0) + s*edge0 + t*edge1;
	mTriangleBary[1] = s;
	mTriangleBary[2] = t;
	mTriangleBary[0] = (T)1 - s - t;
	return sqrDistance;
}

template 
class Point3Tri3Dist<float>;

template 
class Point3Tri3Dist<double>;
