// This source file was auto-generated by ClassMate++
// Created: 19 Jul 2010 2:59:18 pm
// Copyright (c) 2010, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt


template <typename T>
Intersector1<T>::Intersector1 (T u0, T u1, T v0, T v1)
{
	// Malformed interval
    debug_assert(u0 <= u1 && v0 <= v1);
    mU[0] = u0;
    mU[1] = u1;
    mV[0] = v0;
    mV[1] = v1;
    mFirstTime = (T)0;
    mLastTime = (T)0;
    mNumIntersections = 0;
}

template <typename T>
Intersector1<T>::Intersector1 (T u[2], T v[2])
{
	// Malformed interval
    debug_assert(u[0] <= u[1] && v[0] <= v[1]);
    for (int i = 0; i < 2; ++i)
    {
        mU[i] = u[i];
        mV[i] = v[i];
    }
    mFirstTime = (T)0;
    mLastTime = (T)0;
    mNumIntersections = 0;
}

template <typename T>
Intersector1<T>::~Intersector1 ()
{
}

template <typename T>
T Intersector1<T>::getU (int i) const
{
    return mU[i];
}

template <typename T>
T Intersector1<T>::getV (int i) const
{
    return mV[i];
}

template <typename T>
bool Intersector1<T>::test ()
{
    return mU[0] <= mV[1] && mU[1] >= mV[0];
}

template <typename T>
bool Intersector1<T>::find ()
{
    if (mU[1] < mV[0] || mU[0] > mV[1])
    {
        mNumIntersections = 0;
    }
    else if (mU[1] > mV[0])
    {
        if (mU[0] < mV[1])
        {
            mNumIntersections = 2;
            mIntersections[0] = (mU[0] < mV[0] ? mV[0] : mU[0]);
            mIntersections[1] = (mU[1] > mV[1] ? mV[1] : mU[1]);
            if (mIntersections[0] == mIntersections[1])
            {
                mNumIntersections = 1;
            }
        }
        else  // mU[0] == mV[1]
        {
            mNumIntersections = 1;
            mIntersections[0] = mU[0];
        }
    }
    else  // mU[1] == mV[0]
    {
        mNumIntersections = 1;
        mIntersections[0] = mU[1];
    }

    return mNumIntersections > 0;
}

template <typename T>
int Intersector1<T>::getNumIntersections () const
{
    return mNumIntersections;
}

template <typename T>
T Intersector1<T>::getIntersection (int i) const
{
    return mIntersections[i];
}

// Explicit instantiation.
template 
class Intersector1<float>;

template 
class Intersector1<double>;


