// This source file was auto-generated by ClassMate++
// Created: 19 Jul 2010 2:59:18 pm
// Copyright (c) 2010, HurleyWorks

// ctor
template<class T>
Line3<T>::Line3 ()
{	

}
// ctor
template <class T>
Line3<T>::Line3(const Matrix<T,3,1> &p0, const Matrix<T,3,1> &p1)
{	
    set(p0,p1);
}

// dtor
template<class T>
Line3<T>::~Line3 ()
{	
}

// set
template <class T>
inline void Line3<T>::set(const Matrix<T,3,1> &p0, const Matrix<T,3,1> &p1)
{	
    pos = p0; dir = p1-p0;
    dir.normalize();
}

// operator ()
template <class T>
Matrix<T,3,1> Line3<T>::operator()(T parameter) const
{	
    return pos + dir * parameter;
}

// closestPointTo
template <class T>
Matrix<T,3,1> Line3<T>::closestPointTo (const Matrix<T,3,1> & point) const
{	
	return (point - pos).dot(dir) * dir + pos;
}

// closestPointTo
template <class T>
Matrix<T,3,1> Line3<T>::closestPointTo (const Line3 <T> & line) const
{	
    // Assumes the lines are normalized

    Matrix<T,3,1> posLpos = pos - line.pos ;
    T c = dir.dot(posLpos);
    T a = line.dir.dot(dir);
    T f = line.dir.dot(posLpos) ;
    T num = c - a * f;

    T denom = a*a - 1;

    T absDenom = ((denom >= 0)? denom: -denom);

    if (absDenom < 1)
    {
	T absNum = ((num >= 0)? num: -num);

	if (absNum >= absDenom * limits<T>::max())
	    return pos;
    }

    return pos + dir * (num / denom);
}

// distanceTo
template <class T>
T Line3<T>::distanceTo (const Matrix<T,3,1> & point) const
{	
	 return (closestPointTo(point)-point).norm();
}

// distanceTo
template <class T>
T Line3<T>::distanceTo (const Line3 <T> & line) const
{	
	T d = dir.cross(line.dir).dot(line.pos - pos);
    
	return (d >= 0)? d: -d;
}

template
struct Line3<float>;

template
struct Line3<double>;

template
class Line3D<float>;

template
class Line3D<double>;

