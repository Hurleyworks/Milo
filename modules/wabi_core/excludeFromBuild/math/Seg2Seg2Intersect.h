// This header file was auto-generated by ClassMate++
// Created: 29 Jul 2009 11:33:13 pm
// Copyright (c) 2009, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt

#pragma once

template <typename T>
class  Seg2Seg2Intersect : public Intersector<T, Eigen::Matrix<T,2,1> >
{

public:
	Seg2Seg2Intersect (const Segment2<T>& segment0, const  Segment2<T>& segment1);
	~Seg2Seg2Intersect () {}

    // Object access.
	const  Segment2<T>& getSegment0 () const { return *mSegment0; }
    const  Segment2<T>& getSegment1 () const { return *mSegment1; }

    // Static intersection query.
    virtual bool test ();
    virtual bool find ();

    // The intersection set.  If the segment dos not intersect, GetQuantity()
    // returns 0.  If the segments intersect in a single point, GetQuantity()
    // returns 1, in which case GetPoint() returns the point of intersection
    // and Intersector::GetIntersectionType() returns IT_POINT.  If the
    // segments are collinear and intersect in a segment, GetQuantity()
    // returns INT_MAX and Intersector::GetIntersectionType() returns
    // IT_SEGMENT.
	int getQuantity () const { return mQuantity; }
	const Eigen::Matrix<T,2,1>& getPoint () const { return mPoint; }
	
 private:
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_EMPTY;
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_POINT;
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_SEGMENT;
    using Intersector<T, Eigen::Matrix<T,2,1> >::intersectionType_;

 private:

	 // Determine the relationship between the lines that contain the segments.
    int classify (T* s, Eigen::Matrix<T,2,1> * diff, Eigen::Matrix<T,2,1> * diffN);

    // The objects to intersect.
    const Segment2<T>* mSegment0;
    const Segment2<T>* mSegment1;

    // Information about the intersection set.
    int mQuantity;
    Eigen::Matrix<T,2,1> mPoint;
};

typedef Seg2Seg2Intersect<float> Seg2Seg2Intersectf;
typedef Seg2Seg2Intersect<double> Seg2Seg2Intersectd;