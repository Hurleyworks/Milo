// This source file was auto-generated by ClassMate++
// Created: 19 Jul 2010 2:59:18 pm
// Copyright (c) 2010, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt

// ctor
template <typename T>
Seg3Tri3Intersect<T>::Seg3Tri3Intersect (const Segment3 < T > & segment,
                                        const Triangle3 < T > & triangle)
	: mSegment(&segment),
	  mTriangle(&triangle)
{	
	 mQuantity = 0;
}

// dtor
template <typename T>
Seg3Tri3Intersect<T>::~Seg3Tri3Intersect ()
{	
}

// find
template <typename T>
bool Seg3Tri3Intersect<T>::find ()
{	
	// Compute the offset origin, edges, and normal.
    Matrix<T,3,1> diff = mSegment->center - mTriangle->getVertexPos(0);
    Matrix<T,3,1> edge1 = mTriangle->getVertexPos(1) - mTriangle->getVertexPos(0);
    Matrix<T,3,1> edge2 = mTriangle->getVertexPos(2) - mTriangle->getVertexPos(0);
    Matrix<T,3,1> normal = edge1.cross(edge2);

    // Solve Q + t*D = b1*E1 + b2*E2 (Q = diff, D = segment direction,
    // E1 = edge1, E2 = edge2, N = cross(E1,E2)) by
    //   |dot(D,N)|*b1 = sign(dot(D,N))*dot(D,cross(Q,E2))
    //   |dot(D,N)|*b2 = sign(dot(D,N))*dot(D,cross(E1,Q))
    //   |dot(D,N)|*t = -sign(dot(D,N))*dot(Q,N)
    T DdN = mSegment->direction.dot(normal);
    T sign;
    if (DdN > Math<T>::ZERO_TOLERANCE)
    {
        sign = (T)1;
    }
    else if (DdN < -Math<T>::ZERO_TOLERANCE)
    {
        sign = (T)-1;
        DdN = -DdN;
    }
    else
    {
        // Segment and triangle are parallel, call it a "no intersection"
        // even if the segment does intersect.
        intersectionType_ = IT_EMPTY;
        return false;
    }

    T DdQxE2 = sign*mSegment->direction.dot(diff.cross(edge2));
    if (DdQxE2 >= (T)0)
    {
        T DdE1xQ = sign*mSegment->direction.dot(edge1.cross(diff));
        if (DdE1xQ >= (T)0)
        {
            if (DdQxE2 + DdE1xQ <= DdN)
            {
                // Line intersects triangle, check if segment does.
                T QdN = -sign*diff.dot(normal);
                T extDdN = mSegment->extent*DdN;
                if (-extDdN <= QdN && QdN <= extDdN)
                {
                    // Segment intersects triangle.
                    intersectionType_ = IT_POINT;
                    return true;
                }
                // else: |t| > extent, no intersection
            }
            // else: b1+b2 > 1, no intersection
        }
        // else: b2 < 0, no intersection
    }
    // else: b1 < 0, no intersection

    intersectionType_ = IT_EMPTY;
    return false;
}

// getPoint
template <typename T>
const Eigen::Matrix<T,3,1> & Seg3Tri3Intersect<T>::getPoint (int i) const
{	
	debug_assert( i >= 0  && i < 3 );

	return mPoint[i];	
}

// test
template <typename T>
bool Seg3Tri3Intersect<T>::test ()
{	
    // Compute the offset origin, edges, and normal.
    Matrix<T,3,1> diff = mSegment->center - mTriangle->getVertexPos(0);
    Matrix<T,3,1> edge1 = mTriangle->getVertexPos(1) - mTriangle->getVertexPos(0);
    Matrix<T,3,1> edge2 = mTriangle->getVertexPos(2) - mTriangle->getVertexPos(0);
    Matrix<T,3,1> normal = edge1.cross(edge2);

    // Solve Q + t*D = b1*E1 + b2*E2 (Q = diff, D = segment direction,
    // E1 = edge1, E2 = edge2, N = cross(E1,E2)) by
    //   |dot(D,N)|*b1 = sign(dot(D,N))*dot(D,cross(Q,E2))
    //   |dot(D,N)|*b2 = sign(dot(D,N))*dot(D,cross(E1,Q))
    //   |dot(D,N)|*t = -sign(dot(D,N))*dot(Q,N)
    T DdN = mSegment->direction.dot(normal);
    T sign;
    if (DdN > Math<T>::ZERO_TOLERANCE)
    {
        sign = (T)1;
    }
    else if (DdN < -Math<T>::ZERO_TOLERANCE)
    {
        sign = (T)-1;
        DdN = -DdN;
    }
    else
    {
        // Segment and triangle are parallel, call it a "no intersection"
        // even if the segment does intersect.
        intersectionType_ = IT_EMPTY;
        return false;
    }

    T DdQxE2 = sign*mSegment->direction.dot(diff.cross(edge2));
    if (DdQxE2 >= (T)0)
    {
        T DdE1xQ = sign*mSegment->direction.dot(edge1.cross(diff));
        if (DdE1xQ >= (T)0)
        {
            if (DdQxE2 + DdE1xQ <= DdN)
            {
                // Line intersects triangle, check if segment does.
                T QdN = -sign*diff.dot(normal);
                T extDdN = mSegment->extent*DdN;
                if (-extDdN <= QdN && QdN <= extDdN)
                {
                    // Segment intersects triangle.
                    intersectionType_ = IT_POINT;
                    return true;
                }
                // else: |t| > extent, no intersection
            }
            // else: b1+b2 > 1, no intersection
        }
        // else: b2 < 0, no intersection
    }
    // else: b1 < 0, no intersection

    intersectionType_ = IT_EMPTY;
    return false;
}

// Explicit instantiation.
template 
class Seg3Tri3Intersect<float>;

template 
class Seg3Tri3Intersect<double>;



