// This header file was auto-generated by ClassMate++
// Created: 29 Jul 2009 11:33:13 pm
// Copyright (c) 2009, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt

#pragma once

template <typename T>
class  Line2Tri2Intersect : public Intersector<T, Eigen::Matrix<T,2,1> >
{

 public:
	Line2Tri2Intersect (const Line2<T>& line, const  Triangle2<T>& triangle);

    // Object access.
    const  Line2<T>& getLine () const;
    const  Triangle2<T>& getTriangle () const;

    // Static intersection query.
    virtual bool test ();
    virtual bool find ();

    // The intersection set.  If the line and triangle do not intersect,
    // getQuantity() returns 0, in which case the intersection type is
    // IT_EMPTY.  If the line and triangle intersect in a single point,
    // getQuantity() returns 1, in which case the intersection type is
    // IT_POINT and getPoint() returns the intersection point.  If the line
    // and triangle intersect in a segment, getQuantity() returns 2, in which
    // case the intersection type is IT_SEGMENT and getPoint() returns the
    // segment endpoints.
    int getQuantity () const;
    const Eigen::Matrix<T,2,1>& getPoint (int i) const;
	
 private:
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_EMPTY;
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_POINT;
    using Intersector<T, Eigen::Matrix<T,2,1> >::IT_SEGMENT;
    using Intersector<T, Eigen::Matrix<T,2,1> >::intersectionType_;

 private:

    // The objects to intersect.
    const Line2<T>* mLine;
    const Triangle2<T>* mTriangle;

    // Information about the intersection set.
    int mQuantity;
    Eigen::Matrix<T,2,1> mPoint[2];

 public:
    // Shared by IntrRay2Triangle2 and IntrSegment2Triangle2.

    // Determine how the triangle and line intersect (if at all).
    static void TriangleLineRelations (const Eigen::Matrix<T,2,1>& origin,
									   const Eigen::Matrix<T,2,1>& direction, 
									   const Triangle2<T>& triangle,
									   T dist[3], int sign[3], 
									   int& positive, int& negative, int& zero);

    // Compute the parameter interval for the segment of intersection when
    // the triangle transversely intersects the line.
    static void getInterval (const Eigen::Matrix<T,2,1>& origin,
							 const Eigen::Matrix<T,2,1>& direction,
							 const Triangle2<T>& triangle,
							 const T dist[3], const int sign[3], T param[2]);
};

typedef Line2Tri2Intersect<float> Line2Tri2Intersectf;
typedef Line2Tri2Intersect<double> Line2Tri2Intersectd;