// This header file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// Geometric Tools, LLC
// Copyright (c) 1998-2014
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
//

#pragma once

template <typename T, typename vector_t>
class Distance
{

 public:
	virtual ~Distance();
	
	virtual T Get() = 0;     // distance
	virtual T GetSquared() = 0;  // squared distance

	const vector_t & GetClosestPoint0() const { return mClosestPoint0; }
	const vector_t & GetClosestPoint1() const { return mClosestPoint1; }

	bool HasMultipleClosestPoints0() const { return mHasMultipleClosestPoints0; }
	bool HasMultipleClosestPoints1() const { return mHasMultipleClosestPoints1; }

 protected:
	Distance();

	vector_t mClosestPoint0;
	vector_t mClosestPoint1;
	bool mHasMultipleClosestPoints0 = false;
	bool mHasMultipleClosestPoints1 = false;

}; // end class Distance

typedef Distance<float, Eigen::Vector2f> Distance2f;
typedef Distance<float, Eigen::Vector3f> Distance3f;
typedef Distance<double, Eigen::Vector2d> Distance2d;
typedef Distance<double, Eigen::Vector3d> Distance3d;
