// This header file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// Geometric Tools, LLC
// Copyright (c) 1998-2014
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
//

#pragma once

template <typename T>
class Tri3Tri3Dist : public Distance<T, Eigen::Matrix<T, 3, 1>  >
{

 public:
	Tri3Tri3Dist (const Triangle3 <T> & triangle0, const Triangle3 <T> & triangle1);
	~Tri3Tri3Dist ();
	
	// Object access.
	const Triangle3<T>& GetTriangle0() const { return *mTriangle0; }
	const Triangle3<T>& GetTriangle1() const { return *mTriangle1; }

	// Static distance queries.
	virtual T Get() { return Math<T>::Sqrt(GetSquared()); }
	virtual T GetSquared();

	// Information about the closest points.
	T GetTriangleBary0(int i) const { return mTriangleBary0[i]; }
	T GetTriangleBary1(int i) const { return mTriangleBary1[i]; }

private:
	using Distance<T, Eigen::Matrix<T, 3, 1> >::mClosestPoint0;
	using Distance<T, Eigen::Matrix<T, 3, 1> >::mClosestPoint1;

	const Triangle3<T>* mTriangle0;
	const Triangle3<T>* mTriangle1;

	// Information about the closest points.
	T mTriangleBary0[3];  // closest0 = sum_{i=0}^2 bary0[i]*vertex0[i]
	T mTriangleBary1[3];  // closest1 = sum_{i=0}^2 bary1[i]*vertex1[i]

}; // end class Tri3Tri3Dist
