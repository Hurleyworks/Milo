#include "Seg3Tri3Dist.h"
// This source file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// ctor
template <typename T>
Seg3Tri3Dist<T>::Seg3Tri3Dist (const Segment3 <T> & segment, const Triangle3 <T> & triangle)
	: mSegment(&segment),
	  mTriangle(&triangle)
{
}

// dtor
template <typename T>
Seg3Tri3Dist<T>::~Seg3Tri3Dist ()
{	
}

template<typename T>
T Seg3Tri3Dist<T>::GetSquared()
{
	Line3D<T> line(mSegment->center, mSegment->direction);
	Line3Tri3Dist<T> queryLT(line, *mTriangle);
	T sqrDist = queryLT.GetSquared();
	mSegmentParameter = queryLT.GetLineParameter();

	if (mSegmentParameter >= -mSegment->extent)
	{
		if (mSegmentParameter <= mSegment->extent)
		{
			mClosestPoint0 = queryLT.GetClosestPoint0();
			mClosestPoint1 = queryLT.GetClosestPoint1();
			mTriangleBary[0] = queryLT.GetTriangleBary(0);
			mTriangleBary[1] = queryLT.GetTriangleBary(1);
			mTriangleBary[2] = queryLT.GetTriangleBary(2);
		}
		else
		{
			mClosestPoint0 = mSegment->p1;
			Point3Tri3Dist<T> queryPT(mClosestPoint0, *mTriangle);
			sqrDist = queryPT.GetSquared();
			mClosestPoint1 = queryPT.GetClosestPoint1();
			mSegmentParameter = mSegment->extent;
			mTriangleBary[0] = queryPT.GetTriangleBary(0);
			mTriangleBary[1] = queryPT.GetTriangleBary(1);
			mTriangleBary[2] = queryPT.GetTriangleBary(2);
		}
	}
	else
	{
		mClosestPoint0 = mSegment->p0;
		Point3Tri3Dist<T> queryPT(mClosestPoint0, *mTriangle);
		sqrDist = queryPT.GetSquared();
		mClosestPoint1 = queryPT.GetClosestPoint1();
		mSegmentParameter = -mSegment->extent;
		mTriangleBary[0] = queryPT.GetTriangleBary(0);
		mTriangleBary[1] = queryPT.GetTriangleBary(1);
		mTriangleBary[2] = queryPT.GetTriangleBary(2);
	}

	return sqrDist;
}

template
class Seg3Tri3Dist<float>;

template
class Seg3Tri3Dist<double>;
