// This header file was auto-generated by ClassMate++
// Created: 6 Mar 2009 9:34:37 pm
// Copyright (c) 2009, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt

#pragma once

template<class T>
class Tetrahedron3
		/// The tetrahedron is represented as an array of four vertices:
		/// V0, V1, V2, and V3.  The vertices are ordered so that the triangular
		/// faces are counterclockwise-ordered triangles when viewed by an observer
		/// outside the tetrahedron:
		///   face 0 = <v[0],v[2],v[1]>
		///   face 1 = <v[0],v[1],v[3]>
		///   face 2 = <v[0],v[3],v[2]>
		///   face 3 = <v[1],v[2],v[3]>
{

 public:
	typedef std::shared_ptr<Tetrahedron3<T> > Ptr;

 public:
	Tetrahedron3 ();
		/// Creates a Tetrahedron3 instance

	Tetrahedron3 (const Eigen::Matrix<T,3,1> pnts[4]);
		/// Creates a Tetrahedron3 instance

	Tetrahedron3 (const Eigen::Matrix<T,3,1> & v0,
				  const Eigen::Matrix<T,3,1> & v1, 
				  const Eigen::Matrix<T,3,1> & v2,
				  const Eigen::Matrix<T,3,1> & v3);
		/// Creates a Tetrahedron3 instance

	Tetrahedron3 (const Tetrahedron3<T>& other);
		/// Creates a Tetrahedron3 instance

	Tetrahedron3 (const Triangle3<T> triangle, float height = 1.0f);
		/// Creates a Tetrahedron3 instance

	~Tetrahedron3 ();
		/// Destroys a Tetrahedron3 instance

	Tetrahedron3<T>& operator=( const Tetrahedron3<T>& other );
		/// Creates a Tetrahedron3 instance from another
	
	void getFaceIndices (int face, int index[3]) const;
		/// Get the vertex indices for the specified face.

	Eigen::Matrix<T,3,1> v[4];

}; // end class Tetrahedron3


typedef Tetrahedron3<float> Tetrahedron3f;
typedef Tetrahedron3<double> Tetrahedron3d;
typedef std::vector<Tetrahedron3f> TetraVecf;
typedef std::vector<Tetrahedron3d> TetraVecd;

