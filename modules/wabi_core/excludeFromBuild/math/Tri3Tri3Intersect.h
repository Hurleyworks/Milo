// This header file was auto-generated by ClassMate++
// Created: 29 Jul 2009 11:33:13 pm
// Copyright (c) 2009, HurleyWorks

// modified version of 
// Geometric Tools, LLC
// Copyright (c) 1998-2010
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt

#pragma once

template <typename T>
class Tri3Tri3Intersect : public Intersector<T, Eigen::Matrix<T,3,1>  >
{

 public:
	Tri3Tri3Intersect (const Triangle3 <T> & triangle0,
                       const Triangle3 <T> & triangle1);

	~Tri3Tri3Intersect ();
	
	virtual bool find ();
	virtual bool find( T dist3[], T signs3[] );
	virtual bool test ();
	bool reportCoplanarIntersections;  // default 'true'

	 // The intersection set.
    int getQuantity () const;
    const Eigen::Matrix<T,3,1>& getPoint (int i) const;
	
 private:
    using Intersector<T, Eigen::Matrix<T,3,1> >::IT_EMPTY;
    using Intersector<T, Eigen::Matrix<T,3,1> >::IT_POINT;
    using Intersector<T, Eigen::Matrix<T,3,1> >::IT_SEGMENT;
	using Intersector<T, Eigen::Matrix<T,3,1> >::IT_PLANE;
    using Intersector<T, Eigen::Matrix<T,3,1> >::IT_OTHER;
    using Intersector<T, Eigen::Matrix<T,3,1> >::intersectionType_;
	
 private:
	// The objects to intersect.
    const Triangle3<T>* mTriangle0;
    const Triangle3<T>* mTriangle1;

	// Information about the intersection set.
    int mQuantity;
    Eigen::Matrix <T, 3, 1> mPoint[6];

	static void projectOntoAxis (const Triangle3 <T> & triangle,
                                 const Eigen::Matrix <T, 3, 1> & axis, 
                                 T & fmin, 
                                 T & fmax);
		/// TODO: Add a comment for the projectOntoAxis method

	static void trianglePlaneRelations (const Triangle3<T>& triangle,
										const Plane<T>& plane, T distance[3], int sign[3],
										int& positive, int& negative, int& zero);

	
    bool intersectsSegment (const Plane <T> & plane,
							const Triangle3 <T>& triangle,
							const Eigen::Matrix<T,3,1>& end0,
							const Eigen::Matrix<T,3,1>& end1);

	bool getCoplanarIntersection (const Plane <T> & plane,
                                  const Triangle3 <T> & tri0, 
                                  const Triangle3 <T> & tri1);
		/// TODO: Add a comment for the getCoplanarIntersection method

	bool containsPoint (const Triangle3 <T>& triangle,
					    const Plane <T> & plane, 
						const Eigen::Matrix<T,3,1>& point);
}; // end class Tri3Tri3Intersect

typedef Tri3Tri3Intersect<float> Tri3Tri3Intersectf;
typedef Tri3Tri3Intersect<double> Tri3Tri3Intersectd;
