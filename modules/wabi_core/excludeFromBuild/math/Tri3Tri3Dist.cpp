#include "Tri3Tri3Dist.h"
// This source file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// ctor
template <typename T>
Tri3Tri3Dist<T>::Tri3Tri3Dist (const Triangle3 <T> & triangle0, const Triangle3 <T> & triangle1)
	:mTriangle0(&triangle0),
	 mTriangle1(&triangle1)
{
}

// dtor
template <typename T>
Tri3Tri3Dist<T>::~Tri3Tri3Dist ()
{	
}

template<typename T>
T Tri3Tri3Dist<T>::GetSquared()
{
	// Compare edges of triangle0 to the interior of triangle1.
	T sqrDist = Math<T>::MAX_REAL, sqrDistTmp;
	Segment3<T> edge;
	T ratio;
	int i0, i1;
	for (i0 = 2, i1 = 0; i1 < 3; i0 = i1++)
	{
		edge.center = ((T)0.5)*(mTriangle0->getVertexPos(i0) + mTriangle0->getVertexPos(i1));
		edge.direction = mTriangle0->getVertexPos(i1) - mTriangle0->getVertexPos(i0);
		edge.extent = ((T)0.5)*eigenEx::normalize(edge.direction);
		edge.computeEndPoints();

		Seg3Tri3Dist<T> queryST(edge, *mTriangle1);
		sqrDistTmp = queryST.GetSquared();
		if (sqrDistTmp < sqrDist)
		{
			mClosestPoint0 = queryST.GetClosestPoint0();
			mClosestPoint1 = queryST.GetClosestPoint1();
			sqrDist = sqrDistTmp;

			ratio = queryST.GetSegmentParameter() / edge.extent;
			mTriangleBary0[i0] = ((T)0.5)*((T)1 - ratio);
			mTriangleBary0[i1] = (T)1 - mTriangleBary0[i0];
			mTriangleBary0[3 - i0 - i1] = (T)0;
			mTriangleBary1[0] = queryST.GetTriangleBary(0);
			mTriangleBary1[1] = queryST.GetTriangleBary(1);
			mTriangleBary1[2] = queryST.GetTriangleBary(2);

			if (sqrDist <= Math<T>::ZERO_TOLERANCE)
			{
				return (T)0;
			}
		}
	}

	// Compare edges of triangle1 to the interior of triangle0.
	for (i0 = 2, i1 = 0; i1 < 3; i0 = i1++)
	{
		edge.center = ((T)0.5)*(mTriangle1->getVertexPos(i0) + mTriangle1->getVertexPos(i1));
		edge.direction = mTriangle1->getVertexPos(i1) - mTriangle1->getVertexPos(i0);
		edge.extent = ((T)0.5)*eigenEx::normalize(edge.direction);
		edge.computeEndPoints();

		Seg3Tri3Dist<T> queryST(edge, *mTriangle0);
		sqrDistTmp = queryST.GetSquared();
		if (sqrDistTmp < sqrDist)
		{
			mClosestPoint0 = queryST.GetClosestPoint0();
			mClosestPoint1 = queryST.GetClosestPoint1();
			sqrDist = sqrDistTmp;

			ratio = queryST.GetSegmentParameter() / edge.extent;
			mTriangleBary1[i0] = ((T)0.5)*((T)1 - ratio);
			mTriangleBary1[i1] = (T)1 - mTriangleBary1[i0];
			mTriangleBary1[3 - i0 - i1] = (T)0;
			mTriangleBary0[0] = queryST.GetTriangleBary(0);
			mTriangleBary0[1] = queryST.GetTriangleBary(1);
			mTriangleBary0[2] = queryST.GetTriangleBary(2);

			if (sqrDist <= Math<T>::ZERO_TOLERANCE)
			{
				return (T)0;
			}
		}
	}

	return sqrDist;
}

template
class Tri3Tri3Dist<float>;

template
class Tri3Tri3Dist<double>;