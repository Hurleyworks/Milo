// This header file was auto-generated by ClassMate++
// Created: 5 Jul 2016 10:58:30 am
// Copyright (c) 2016, HurleyWorks

// Geometric Tools, LLC
// Copyright (c) 1998-2014
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
//

#pragma once

template <typename T>
class Line3Tri3Dist : public Distance<T, Eigen::Matrix<T, 3, 1>  >
{

 public:
	Line3Tri3Dist (const Line3D<T>& line, const Triangle3<T>& triangle);
	~Line3Tri3Dist ();
	
	const Line3D<T>& GetLine() const { return *mLine; }
	const Triangle3<T>& GetTriangle() const { return *mTriangle; }

	// Static distance queries.
	virtual T Get() { return Math<T>::Sqrt(GetSquared()); }
	virtual T GetSquared();

	// Information about the closest points.
	T GetLineParameter() const { return mLineParameter; }
	T GetTriangleBary(int i) const { return mTriangleBary[i]; }

 private:
	using Distance<T, Eigen::Matrix<T, 3, 1> >::mClosestPoint0;
	using Distance<T, Eigen::Matrix<T, 3, 1> >::mClosestPoint1;

	const Line3D<T>* mLine;
	const Triangle3<T>* mTriangle;

	// Information about the closest points.

	// closest0 = line.origin + param*line.direction
	T mLineParameter;

	// closest1 = sum_{i=0}^2 bary[i]*tri.vertex[i]
	T mTriangleBary[3];

}; // end class Line3Tri3Dist
