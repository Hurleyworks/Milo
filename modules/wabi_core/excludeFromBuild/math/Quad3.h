// This header file was auto-generated by ClassMate++
// Created: 6 Mar 2009 9:34:37 pm
// Copyright (c) 2009, HurleyWorks

#pragma once

template<class T>
class Quad3
{

 public:
	Quad3 ();
	Quad3 (const Eigen::Matrix<T,3,1> other[4]);
	Quad3 (const Eigen::Matrix<T,3,1> & v0,
           const Eigen::Matrix<T,3,1> & v1, 
           const Eigen::Matrix<T,3,1> & v2,
		   const Eigen::Matrix<T,3,1> & v3);
	
	~Quad3 ();

 private:
	Eigen::Matrix<T,3,1> v[4];

}; // end class Quad3

typedef Quad3<float> Quad3f;
typedef Quad3<double> Quad3d;

// ctor
template<class T>
Quad3<T>::Quad3 ()
{	TRACE("Quad3<T>::Quad3")
}

// ctor
template<class T>
Quad3<T>::Quad3 (const Eigen::Matrix<T,3,1> other[4])
{	TRACE("Quad3<T>::Quad3")

	for( int i = 0; i < 4; i++ )
		v[i] = other[i];
}

// ctor
template<class T>
Quad3<T>::Quad3 (const Eigen::Matrix<T,3,1> & v0,
				 const Eigen::Matrix<T,3,1> & v1, 
                 const Eigen::Matrix<T,3,1> & v2,
				 const Eigen::Matrix<T,3,1> & v3)
{	TRACE("Quad3<T>::Quad3")

	v[0] = v0;
	v[1] = v1;
	v[2] = v2;
	v[3] = v3;
}

// dtor
template<class T>
Quad3<T>::~Quad3 ()
{	TRACE("Quad3<T>::~Quad3")
}
