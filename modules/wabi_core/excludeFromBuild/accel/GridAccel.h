// This header file was auto-generated by ClassMate++
// Created: 5 Dec 2010 8:34:44 am
// Copyright (c) 2010, HurleyWorks

#pragma once

template <typename T>
class GridAccel 
{

 public:
	typedef std::shared_ptr<GridAccel<T>> Ptr;
	enum { VOXEL_MAX = 128 };

 public:
	GridAccel ();
	~GridAccel ();
	
	void populate ();
	void construct (const BoundingBox3<T> meshBBox);
	
	bool testForIntersection (Ray3<T> & ray);

	long getVoxelCount () const;
	Voxel<T>** getVoxels () const;

	void dumpVoxelInfo(std::ostringstream& ostr);
	void dumpVoxelInfo();
	void cleanUp ();
	
	std::vector<Triangle3<T> > triangles;

 private:
	BoundingBox3<T> bbox_;
	bool isBuilt_;
	int voxPerAxis_[3];		// number of voxels along each axis
	Voxel<T> **voxels_;		// array of voxel ptrs
	long voxelCount_;
	T voxDim_[3];			// the dimensions of a voxel
	T invVoxDim_[3];		// inverse of above
	T invRayDir_[3];
	Eigen::Matrix<T,3,1> voxelExtent_;
	Eigen::Matrix<T,3,1> entryPoint_;
	std::mutex mutex_;

	// helpers	
	void getVoxelIndex (T x, T y, T z, int i[]);
	int offset (int x, int y, int z) const;
	int posToVoxel (const Eigen::Matrix<T,3,1> & pos, int axis) const;
	T voxelToPos (int p, int axis) const;
	Eigen::Matrix<T,3,1> voxelToPos (int x, int y, int z) const;

}; // end class GridAccel

typedef GridAccel<float> GridAccelf;
typedef GridAccel<double> GridAcceld;