// This header file was auto-generated by ClassMate++
// Created: 16 Sep 2017 5:37:16 pm
// Copyright (c) 2017, HurleyWorks

#pragma once

static const char* LoadOptionsTable[] =
    {
        "MeshesOnly",
        "ImagesOnly",
        "MeshesAndImages",
        "Invalid"};

struct LoadOptions
{
    enum ELoadOptions
    {
        MeshesOnly = 1 << 0,
        ImagesOnly = 1 << 1,
        MeshesAndImages = 1 << 2,
        Invalid = 1 << 3
    };

    union
    {
        ELoadOptions name;
        unsigned value;
    };

    LoadOptions (ELoadOptions name) :
        name (name) {}
    LoadOptions (unsigned value) :
        value (value) {}
    LoadOptions() :
        value (0) {}
    void clear() { value = 0; }
    operator ELoadOptions() const { return name; }
    unsigned operator|= (LoadOptions m) { return value |= m; }
    unsigned operator&= (LoadOptions m) { return value &= m; }
    unsigned operator^= (LoadOptions m) { return value ^= m; }

    std::string toString()
    {
        std::ostringstream ostr;
        ostr << "  LoadOptions";

        if (value & MeshesOnly)
            ostr << "::MeshesOnly";

        if (value & ImagesOnly)
            ostr << "::ImagesOnly:";

        if (value & MeshesAndImages)
            ostr << "::MeshesAndImages:";

        if (value & Invalid)
            ostr << "::Invalid:";

        return ostr.str();
    }
};

static const char* SelectionOptionsTable[] =
    {
        "None",
        "All",
        "Invert",
        "StaticBodies",
        "DynamicBodies",
        "Invalid"};

struct SelectionOptions
{
    enum ESelectionOptions
    {
        None = 1 << 0,
        All = 1 << 1,
        Invert = 1 << 2,
        StaticBodies = 1 << 3,
        DynamicBodies = 1 << 4,
        Invalid = 1 << 5
    };

    union
    {
        ESelectionOptions name;
        unsigned value;
    };

    SelectionOptions (ESelectionOptions name) :
        name (name) {}
    SelectionOptions (unsigned value) :
        value (value) {}
    SelectionOptions() :
        value (0) {}
    void clear() { value = 0; }
    operator ESelectionOptions() const { return name; }
    unsigned operator|= (SelectionOptions m) { return value |= m; }
    unsigned operator&= (SelectionOptions m) { return value &= m; }
    unsigned operator^= (SelectionOptions m) { return value ^= m; }

    std::string toString()
    {
        std::ostringstream ostr;
        ostr << "  SelectionOptions";

        if (value & All)
            ostr << "::All";

        if (value & None)
            ostr << "::None:";

        if (value & Invert)
            ostr << "::Invert:";

        if (value & StaticBodies)
            ostr << "::StaticBodies:";

        if (value & DynamicBodies)
            ostr << "::DynamicBodies:";

        if (value & Invalid)
            ostr << "::Invalid:";

        return ostr.str();
    }
};
