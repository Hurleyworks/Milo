// This header file was auto-generated by ClassMate++
// Created: 31 Jul 2019 4:12:49 pm
// Copyright (c) 2019, HurleyWorks

#pragma once
#include <qms_core/qms_core.h>

using ImageQueue = moodycamel::ConcurrentQueue<OIIO::ImageBuf>;
using ErrorQueue = moodycamel::ConcurrentQueue<ErrMsg>;

class Dreamer
{
 public:
    Dreamer() = default;
    ~Dreamer() = default;

    void init (MessageService messengers, const PropertyService& properties);
    void loadImagesAsync (const PathList& imagePaths);


    OIIO::ImageBuf&& getNextImage()
    {
        bool success = imageQueue.try_dequeue (nextImage);

        return std::move (nextImage);
    }

    size_t imagesInQueue() const { return imageQueue.size_approx(); }

    void onError (const ErrMsg& msg)
    {
        errorQueue.enqueue (msg);
    }

    ErrMsg getNextErrorMsg()
    {
        ErrMsg msg;
        bool found = errorQueue.try_dequeue (msg);

        return found ? msg : ErrMsg();
    }

 private:
    MessageService messengers;
    PropertyService properties;

    ImageQueue imageQueue;
    OIIO::ImageBuf nextImage;

    ErrorQueue errorQueue;
}; // end class Dreamer
