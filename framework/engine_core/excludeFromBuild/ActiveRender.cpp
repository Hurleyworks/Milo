// This source file was auto-generated by ClassMate++
// Created: 16 Sep 2017 12:15:26 pm
// Copyright (c) 2017, HurleyWorks

#include "ActiveRender.h"
#include <cubd/cubd.h>
#include "nvcc/CudaCompiler.h"
#include "Renderer.h"

using namespace qms;

// ctor
ActiveRender::ActiveRender() :
    impl (new Renderer()),
    stateThread()
{
    // https://rafalcieslak.wordpress.com/2014/05/16/c11-stdthreads-managed-by-a-designated-class/
    start();
}

// dtor
ActiveRender::~ActiveRender()
{
    done();
    if (stateThread.joinable())
        stateThread.join();
}

// start
void ActiveRender::start()
{
    stateThread = std::thread (&ActiveRender::executeState, this);
}

// executeState
void ActiveRender::executeState()
{
    LOG (DBUG) << "ActiveRender thread is starting up";

    state = &ActiveRender::waitingForMessages;

    while (!shutdown)
    {
        (this->*state)();
    }
    if (impl)
    {
        impl->finalize();
    }
    LOG (DBUG) << "ActiveRender thread is shutting down";
}

// waitingForMessages
void ActiveRender::waitingForMessages()
{
    incoming.wait()
        .handle<qms::clear_queue> ([&] (qms::clear_queue const& msg)
                                   { shutdown = true; })

        .handle<QMS::initRenderEngine> ([&] (QMS::initRenderEngine const& msg)
                                        {
                               imageCache = msg.imageCache;
                               camera = msg.camera;
                                state = &ActiveRender::initRenderEngine; })
        .handle<QMS::addWeakNode> ([&] (QMS::addWeakNode const& msg)
                                   {
                               weakNode = msg.weakNode;
                                state = &ActiveRender::addWeakNode; })

        .handle<QMS::renderNextFrame> ([&] (QMS::renderNextFrame const& msg)
                                       { 
                updateMotion = msg.updateMotion;
                inputEvent = msg.input;
                frameNumber = msg.frameNumber;
                state = &ActiveRender::renderNextFrame; })

        .handle<QMS::addSkydomeHDR> ([&] (QMS::addSkydomeHDR const& msg)
                                     {
                                        path = msg.path;
                                      state = &ActiveRender::addSkydomeHDR; })

        .handle<QMS::init> ([&] (QMS::init const& msg)
                            {
                                messengers = msg.messengers;
                                properties = msg.properties;
                                state = &ActiveRender::init; })


        .handle<QMS::setEngine> ([&] (QMS::setEngine const& msg)
                                 {
                                     engineName = msg.engineName;
                                     state = &ActiveRender::setEngine; });
}

// init
void ActiveRender::init()
{
    try
    {
        impl->init (messengers, properties);
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::initRenderEngine()
{
    try
    {
        if (imageCache && camera)
            impl->initializeEngine (camera, imageCache);
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::renderNextFrame()
{
    try
    {
        // LOG (DBUG) << frameNumber;
        impl->render (inputEvent, updateMotion, frameNumber);

        // reset now
        inputEvent = InputEvent{};
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::addSkydomeHDR()
{
    try
    {
        // we are allowing invalid paths now
        // and will create default blue hdr image
        // if the path is invalid
        impl->addSkyDomeHDR (path);
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::addWeakNode()
{
    try
    {
        if (!weakNode.expired())
            impl->addRenderableNode (weakNode);
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}


void ActiveRender::setEngine()
{
    try
    {
        bool success = impl->setEngine (engineName);
        if (!success)
        {
            LOG (WARNING) << "Failed to set engine: " << engineName;
        }
        else
        {
            LOG (INFO) << "Successfully switched to engine: " << engineName;
        }
    }
    catch (std::exception& e)
    {
        done();
        LOG (DBUG) << e.what();
        messengers.dreamer.send (QMS::onError (e.what() + std::string (" ActiveRender thread is shutting down")));
    }
    catch (...)
    {
        done();
        LOG (DBUG) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}